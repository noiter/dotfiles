############################################################################
# Reset Prefix
############################################################################
set -g prefix2 C-a                        # GNU-Screen compatible prefix
bind C-a send-prefix -2
 
############################################################################
# Global options
############################################################################
# large history
set -g history-limit 5000
 
# colors
#invalid# setw -g mode-bg white 
set-option -g default-terminal "screen-256color" #"xterm-256color" # "screen-256color"

# basic settings
setw -g xterm-keys on # for vim
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

#invalid# set-window-option -g window-status-current-fg white
#invalid# set-window-option -g window-status-current-attr reverse
 
set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
 
# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
set -g mouse on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'
 
# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

############################################################################
# Status Bar
############################################################################
set -g status-justify right
set -g status-bg black # colour213 # pink
set -g status-fg cyan
set -g status-interval 10     # redraw status line every 10 seconds
set -g status-left-length 30
set -g status-left '#[fg=green]#S#[fg=blue] #I:#P#[default]'
set -g status-right '#[fg=green]#h | %m/%d/%y %I:%M'

setw -g monitor-activity on
set -g visual-activity on
 
# Titles (window number, program name, active (or not)
set -g set-titles on          # set terminal title
set -g set-titles-string '#H:#S.#I.#P #W #T'
 
 
############################################################################
# Unbindings
############################################################################
unbind j
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split
 
 
############################################################################
# Bindings
############################################################################
# reload tmux conf
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# new split in current pane (horizontal / vertical)
bind - split-window -v # split pane horizontally
bind \\ split-window -h # split pane vertically

bind Space list-panes  # list panes
bind Enter break-pane  # break-pane
 
# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
# bind C-j command-prompt "joinp"
# bind C-j command-prompt "join-pane"
# bind-key j command-prompt "join-pane -s '%%'"
# bind-key j command-prompt "joinp -t:0"
bind Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D' 

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window 

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# -- urlview -------------------------------------------------------------------
bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"

############################################################################
# VIM MODE
############################################################################
# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'


# -- buffers -------------------------------------------------------------------

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

############################################################################
# Layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window
# panel border
#invalid# set -g pane-border-fg magenta
#invalid# set -g pane-active-border-fg green
#invalid# set -g pane-active-border-bg default

# focus on first window
# select-window -t 0

# Set shell
set -g default-command "reattach-to-user-namespace -l zsh"
